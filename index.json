{"project": "psygnal", "project_url": "https://github.com/tlambert03/psygnal", "show_commit_url": "https://github.com/tlambert03/psygnal/commit/", "hash_length": 8, "revision_to_hash": {"10": "46c0596ded8a0015dbf6560a1231b809035a103c", "13": "1013f23d46a40c55677aefb87a872499dd394af6", "16": "6fd1eba7bc537b64429f655ddb3477e7cff79f3a", "18": "148bcc3112c7543f39b04ed3678f14ac8ddfc75f", "21": "eda523d4d935d8af3dabed45c10be7d215c61f67", "22": "c37a7a0088482f3f386060fb6e73f0f69ed23dd7", "23": "001d7d7841039a9c042ecbaf9d32a031178d8a4d", "24": "eb5ba7593b44692cc31319dd8555ec1d3417d1df", "25": "9e9a66f7186aa4b7211a1f408a27662108422c10", "26": "5310d35e0f3c1b624a9ed2d54ef07436afa2cdb4", "27": "50434155e1050981b1339cc5a886673a580c28a0", "28": "07414b6b9968f954fc2a1096607de4d3faedd4e1", "29": "4562b3f2027a93370f759dcff42ffc0573a2d964", "30": "152104cba8d673402fabc721d3fa33663424608d", "31": "47c78972051abffa727d91a41680e52ea4859f99", "32": "e3391fb256addd6878b6cc1f1a36a025b3a7286e", "33": "7c154541cbdbc3fe00929d012cbb8bed071f057f", "34": "2d4728f32c58e02f26ff294d4bf43da7639bef96", "35": "8993d4b463050644c0a53c8ed00b640793d2b98b", "36": "7af66834bdf58f029f2947b36e8494b353272886", "39": "2b8ef029517545586c5849aa293fcf16a50b981e", "40": "4aa755263517557d61dfe456c341025775236933", "41": "59b2c7b13ef2d19d2d81279de78aa41aac7e6828", "42": "5ff7117cda4a81f918d74322d0e743c1db63ce68", "43": "c99852e24f9451f5409e50576900106d0bca9da5", "44": "96cee80f201adb11d1d3f34d706278e2769a7f25", "46": "5fb87571aaa53bc556581e832a1ed2352b3ee123", "47": "28472005a335769a477de04306c8ffc27ee184f9", "48": "4165ea14786e3bce2925324b155883770ec37264", "49": "d72df61e946e2ad31694e203d34faf8f7d31798b", "50": "723660157610bb6694115377ad1aaea304bdec40", "51": "407f40a8a5f2d9ab8359b2304aea559ce958157b", "52": "057d0e82c7ad04694cfc123b4dd62f781b66f15b", "53": "ccc738cd018c1b58c9bc4fd97550ecc16db80263", "54": "b1f41733610b7ad10958b4a7216ea3d47ca89d2b", "55": "adc34f08a00091b4d345f724c160c08d3f8be032", "56": "0ad82e14395aa52e7f083ad6b5c0ffd71b06c387", "57": "8c5a9c7ce88165bc71e3c2dca78a799d7dac021c", "58": "6615ab22ce1bc3543450a250ca0de3cde4887dad", "59": "b0bf47facd86a27ee6926115ea2e3f3073763b75", "60": "b91158a3f69d47a753858be926d7e41c0d2aeb0d", "61": "0449a6f0e675651442ba63f9e030b1a37f57d5d2", "62": "950989af2db58cba4b7522aa3f9dbf7ef5a4cd0e", "63": "82ebda320a843f55701f5a8a2b573fcb0c44daff", "64": "0769ad402d8fb20bfd4f60675f6fa4f8bbb88256", "65": "7cf49cc3d993aecd09821620a36cf60fc04af4f9", "66": "ad35a696dc4d29040f2c6089fb92e24bc0dfa4af", "69": "409a79c1a96ebf32b95a29ac72aa3f5f9246efc8", "70": "ae9e83cf04122b55817d3333c0814cb81b7bc75f", "71": "4a8f6f403fc8de05c1730c10dc11d2b546fb1535", "93": "db1ea342f41f4c3e39ca77acc5b971ddb191dd30", "94": "b88c90116d9799a8420785ee80b93ae03b1b5c5e", "95": "97f61a34b1249927762efe2b6e056f9f647768ca", "96": "12305394aec08a77c40c5f7f1cc553140c43506d"}, "revision_to_date": {"10": 1625521043000, "13": 1625526224000, "16": 1625526675000, "18": 1625527708000, "21": 1625531580000, "22": 1625668411000, "23": 1625670351000, "24": 1625693581000, "25": 1625699116000, "26": 1625699136000, "27": 1626048187000, "28": 1626048199000, "29": 1626048684000, "30": 1626132980000, "31": 1626737186000, "32": 1627324482000, "33": 1627932395000, "34": 1628654132000, "35": 1629770379000, "36": 1631930853000, "39": 1633094482000, "40": 1633094496000, "41": 1633374520000, "42": 1633980247000, "43": 1634477960000, "44": 1634483708000, "46": 1634501021000, "47": 1634501407000, "48": 1635102333000, "49": 1636124973000, "50": 1636200286000, "51": 1636202714000, "52": 1636203358000, "53": 1636203511000, "54": 1636203908000, "55": 1636204020000, "56": 1636204182000, "57": 1636213121000, "58": 1636216340000, "59": 1636218353000, "60": 1636230475000, "61": 1636253414000, "62": 1636291948000, "63": 1636298532000, "64": 1636314294000, "65": 1636317730000, "66": 1636320892000, "69": 1636325153000, "70": 1636325415000, "71": 1636331238000, "93": 1636747906000, "94": 1637010914000, "95": 1637266259000, "96": 1637612504000}, "params": {"machine": ["github-actions"], "python": ["3.9"], "cython": ["", null], "branch": ["main"]}, "graph_param_list": [{"machine": "github-actions", "python": "3.9", "cython": "", "branch": "main"}, {"machine": "github-actions", "python": "3.9", "branch": "main", "cython": null}], "benchmarks": {"benchmarks.ConnectSuite.time_connect": {"code": "class ConnectSuite:\n    def time_connect(self):\n        self.emitter.changed.connect(callback)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "66e46036f5d42997c49d40a9db3597e499dacb6072ef55c098e003e4282719ff", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_builtin": {"code": "class ConnectSuite:\n    def time_connect_builtin(self):\n        self.emitter.changed.connect(print)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_builtin", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "221168cd3c2a537806a7f6924ebcf8c2191c4a712198efecd60b9ccab55a9ac0", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_checktype": {"code": "class ConnectSuite:\n    def time_connect_checktype(self):\n        self.emitter.changed.connect(callback, check_nargs=True, check_types=True)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_checktype", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c640409d4d3d1c7c9bcd34ad0f1ae8a1de34357d454bf40267453df913de0de", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_lambda": {"code": "class ConnectSuite:\n    def time_connect_lambda(self):\n        self.emitter.changed.connect(lambda x: None)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_lambda", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ba00b5593d648e88bd82a3245976eb32c1d3ddc9682b3860e86899896c6af42d", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_method": {"code": "class ConnectSuite:\n    def time_connect_method(self):\n        self.emitter.changed.connect(self.receiver.method)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_method", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2cb74135059abc458bb8b736e771a9bb881577922d2fd4cb90b6a6924be0de4b", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_nochecks": {"code": "class ConnectSuite:\n    def time_connect_nochecks(self):\n        self.emitter.changed.connect(callback, check_nargs=False, check_types=False)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_nochecks", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3cc7bebdb3f185d0c831f34041217d8447354aee33080adf2f646e9d363d571a", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_partial": {"code": "class ConnectSuite:\n    def time_connect_partial(self):\n        self.emitter.changed.connect(partial(callback))\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_partial", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c9a61f40df416d3ad071f9e9d2d0d401b58e06cf3e3972c0dc0febd23ab9df91", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_partial_method": {"code": "class ConnectSuite:\n    def time_connect_partial_method(self):\n        self.emitter.changed.connect(partial(self.receiver.method2, y=1))\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_partial_method", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9cac7442824f87357461f60156f32c7fc0b0c2cb70cec7b7688abac388b6b5cd", "warmup_time": -1}, "benchmarks.CreateSuite.time_create_signal": {"code": "class CreateSuite:\n    def time_create_signal(self):\n        _ = Signal()", "min_run_count": 2, "name": "benchmarks.CreateSuite.time_create_signal", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4646c749e350ba87553eaed7dafd33c1eb6a5d726510df8ae9e93c20091f8a80", "warmup_time": -1}, "benchmarks.CreateSuite.time_create_signal_instance": {"code": "class CreateSuite:\n    def time_create_signal_instance(self):\n        _ = SignalInstance()", "min_run_count": 2, "name": "benchmarks.CreateSuite.time_create_signal_instance", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2c1362cf3b63757d6a81f4bba01cd935c48320419d45293a4744351efb544022", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_all": {"code": "class EmitSuite:\n    def time_emit_to_all(self, n):\n        self.emitter4.changed.emit(1)\n\n    def setup(self, n):\n        self.receiver = R()\n    \n        self.emitter1 = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_all", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6764349619370cf14b4a25b80495f08802be23fbde153c27bfe0693d0d12c282", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_attr": {"code": "class EmitSuite:\n    def time_emit_to_attr(self, n):\n        self.emitter3.changed.emit(1)\n\n    def setup(self, n):\n        self.receiver = R()\n    \n        self.emitter1 = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_attr", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2318afd31427ac042954824696131db14a9b43d9b95ae800aaea3464746a0b26", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_function": {"code": "class EmitSuite:\n    def time_emit_to_function(self, n):\n        self.emitter1.changed.emit(1)\n\n    def setup(self, n):\n        self.receiver = R()\n    \n        self.emitter1 = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_function", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "38969b0969c100ac912c8c62825b2267bc93ce7d2fc53c5496514748b2dbad22", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_method": {"code": "class EmitSuite:\n    def time_emit_to_method(self, n):\n        self.emitter2.changed.emit(1)\n\n    def setup(self, n):\n        self.receiver = R()\n    \n        self.emitter1 = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_method", "number": 0, "param_names": ["param1"], "params": [["1", "10", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6daf09793d37fc801eff357a44b4c1ef755a7d94c202a7fe9bf84544edea102d", "warmup_time": -1}}, "machines": {"github-actions": {"machine": "github-actions", "version": 1}}, "tags": {"v0.1.0": 21, "v0.1.0rc0": 10, "v0.1.0rc1": 13, "v0.1.0rc2": 16, "v0.1.0rc3": 18, "v0.1.1": 23, "v0.1.2": 29, "v0.1.3": 40, "v0.1.4": 46, "v0.2.0": 70}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}